// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DbContexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(SoftCorpTestTaskDbContext))]
    partial class SoftCorpTestTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_costCategories");

                    b.ToTable("costCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#eb4034",
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#ebde34",
                            Name = "Transport"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#4feb34",
                            Name = "Mobile Communication"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#1732ff",
                            Name = "Internet"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#6017ff",
                            Name = "Entertainment"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pK_families");

                    b.ToTable("families", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("passwordSalt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pK_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("iX_users_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("iX_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FamilyId")
                        .HasColumnType("int")
                        .HasColumnName("familyId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_usersFamilies");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("iX_usersFamilies_familyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("iX_usersFamilies_userId");

                    b.ToTable("usersFamilies", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasColumnName("expirationDateTime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_usersRefreshTokens");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("iX_usersRefreshTokens_userId");

                    b.ToTable("usersRefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UsersCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("comment");

                    b.Property<int>("CostCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("costCategoryId");

                    b.Property<int>("CurrencyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(11)
                        .HasColumnName("currencyCode");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SmallDateTime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 6)
                        .HasColumnType("decimal(8,6)")
                        .HasColumnName("price");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_usersCosts");

                    b.HasIndex("CostCategoryId")
                        .HasDatabaseName("iX_usersCosts_costCategoryId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_usersCosts_userId");

                    b.ToTable("usersCosts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserFamily", b =>
                {
                    b.HasOne("Domain.Entities.Family", "Family")
                        .WithMany("UsersFamilies")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_usersFamilies_families_familyId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Family")
                        .HasForeignKey("Domain.Entities.UserFamily", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_usersFamilies_users_userId");

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("Domain.Entities.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_usersRefreshTokens_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersCost", b =>
                {
                    b.HasOne("Domain.Entities.CostCategory", "CostCategory")
                        .WithMany("UsersCosts")
                        .HasForeignKey("CostCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fK_usersCosts_costCategories_costCategoryId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UsersCosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_usersCosts_users_userId");

                    b.Navigation("CostCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CostCategory", b =>
                {
                    b.Navigation("UsersCosts");
                });

            modelBuilder.Entity("Domain.Entities.Family", b =>
                {
                    b.Navigation("UsersFamilies");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Family")
                        .IsRequired();

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UsersCosts");
                });
#pragma warning restore 612, 618
        }
    }
}
